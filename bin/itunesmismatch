#!/usr/bin/env python

from functools import cmp_to_key
from typing import Dict, Tuple

from libpytunes import Library


import argparse

parser = argparse.ArgumentParser(
    description="Determine mismatched albums from an Apple Music/Itunes Library. Export it from Apple Music."
)
parser.add_argument("xmlfile", type=argparse.FileType("r", encoding="UTF-8"))
args = parser.parse_args()
xmlfile = args.xmlfile


class Album:
    def __init__(self, album: str, album_artist: str):
        self.album = album
        self.album_artist = album_artist
        self.discs = None  # this will be a two dimensional array
        self.errors = set()

    def add(self, song):
        # Forget it if there's no track count
        if song.track_count is None:
            self.errors.add((song, "no track count"))
            return

        disc_idx = song.disc_number - 1
        track_idx = song.track_number - 1

        # Adding the disc entry if necessary
        if not self.discs:  # populate disc count
            self.discs = [None] * song.disc_count
        elif len(self.discs) != song.disc_count:  # disc count mismatch
            self.errors.add((song, "disc count conflict"))
            while len(self.discs) < song.disc_count:
                self.discs.append(None)  # expand the list

        # Adding the song subarray if necessary
        cur_disclist = self.discs[disc_idx]
        if not cur_disclist:
            self.discs[disc_idx] = [None] * song.track_count
        elif len(cur_disclist) != song.track_count:
            self.errors.add((song, "track count conflict"))
            while len(self.discs[disc_idx]) < song.track_count:
                self.discs[disc_idx].append(None)  # expand the list

        if not self.discs[disc_idx][track_idx]:
            self.discs[disc_idx][track_idx] = song
        else:
            self.errors.add((song, "duplicate"))

    def looks_good(self):
        return self.check_for_completeness() and len(self.errors) == 0

    def check_for_completeness(self):
        # Basically if there is a None in the list, it's not complete
        for tracklist in self.discs:
            if tracklist is None:
                return False
            for song in tracklist:
                if not song:
                    return False
        return True

    def song_description(self, song):
        return "\t".join(
            [
                f"{song.disc_number}/{song.disc_count}",
                f"{song.track_number}/{song.track_count}",
                song.name,
            ]
        )

    def __str__(self):
        # lines = [f"{self.album_artist} - {self.album}"]
        # for s in self.songs:
        #     lines.append("\t" + self.song_description(s))

        lines = [f"{self.album_artist} - {self.album}"]

        lines.append("\tTrack List")
        for tracklist in self.discs:
            if tracklist is None:
                lines.append("\t\t Empty Disc")
                continue
            for song in tracklist:
                if not song:
                    lines.append("\t\t" + "EMPTY")
                else:
                    lines.append("\t\t" + self.song_description(song))

        lines.append("\tErrors")
        for (song, message) in self.errors:
            lines.append("\t\t" + self.song_description(song) + "\t" + message)

        return "\n".join(lines)


class Collection:
    albums: Dict[Tuple[str, str], Album]

    def __init__(self):
        self.albums = dict()

    def add(self, song):
        album_artist = song.album_artist
        album = song.album
        key = (album_artist, album)
        if key not in self.albums:
            self.albums[key] = Album(album_artist=album_artist, album=album)
        self.albums[key].add(song)


library = Library(xmlfile.name)
collection = Collection()

for id, song in library.songs.items():
    if song.album_artist is None:  # TODO: find a better way to skip
        continue

    collection.add(song)

for key in sorted(collection.albums.keys()):
    album = collection.albums[key]
    if not album.looks_good():
        print(album)
        print("\n")
