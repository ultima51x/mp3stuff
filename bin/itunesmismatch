#!/usr/bin/env python

from functools import cmp_to_key
from typing import Dict, Tuple

from libpytunes import Library


import argparse

parser = argparse.ArgumentParser(
    description="Determine mismatched albums from an Apple Music/Itunes Library. Export it from Apple Music."
)
parser.add_argument("xmlfile", type=argparse.FileType("r", encoding="UTF-8"))
args = parser.parse_args()
xmlfile = args.xmlfile


def compare_tracks(a, b):
    if a.disc_number == b.disc_number:
        return a.track_number - b.track_number
    else:
        return a.disc_number - b.disc_number


class Album:
    def __init__(self, album: str, album_artist: str):
        self.album = album
        self.album_artist = album_artist
        self.songs = []

    def is_complete(self) -> bool:
        return False

    def add(self, song):
        self.songs.append(song)

    def complete(self):
        # Current logic:
        #
        # If disc numbers are the same, make sure there is no jump
        # example: Track 3 to Track 5
        self.songs.sort(key=cmp_to_key(compare_tracks))
        cursor = None
        for s in self.songs:
            if cursor and s.disc_number == cursor.disc_number:
                if s.track_number - cursor.track_number > 1:
                    return False

            cursor = s

        return True

    def song_description(self, song):
        return "\t".join(
            [
                f"{song.disc_number}/{song.disc_count}",
                f"{song.track_number}/{song.track_count}",
                song.name,
            ]
        )

    def __str__(self):
        lines = [f"{self.album_artist} - {self.album}"]
        for s in self.songs:
            lines.append("\t" + self.song_description(s))
        return "\n".join(lines)


class Collection:
    albums: Dict[Tuple[str, str], Album]

    def __init__(self):
        self.albums = dict()

    def add(self, song):
        album_artist = song.album_artist
        album = song.album
        key = (album_artist, album)
        if key not in self.albums:
            self.albums[key] = Album(album_artist=album_artist, album=album)
        self.albums[key].add(song)


library = Library(xmlfile.name)
collection = Collection()

for id, song in library.songs.items():
    if song.album_artist is None:  # TODO: find a better way to skip
        continue

    collection.add(song)

for k, album in collection.albums.items():
    if not album.complete():
        print(album)
        print("\n")
